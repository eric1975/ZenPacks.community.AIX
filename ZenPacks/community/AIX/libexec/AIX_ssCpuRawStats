#!/usr/bin/env python

"""Gather CPU performance statistics for AIX"""

import sys
import re
from subprocess import *

base_cpu_table_oid= "1.3.6.1.4.1.2.3.1.2.2.2.1.1.1"
user= 6
user_oid= "%s.%s" % ( base_cpu_table_oid, user )
kernel= 4
kernel_oid= "%s.%s" % ( base_cpu_table_oid, kernel )
wait= 5
wait_oid= "%s.%s" % ( base_cpu_table_oid, wait )
idle= 3
idle_oid= "%s.%s" % ( base_cpu_table_oid, idle )


total_usage= {
   user:0,
   kernel:0,
   wait:0,
   idle:0,
}

CPU_STATS= re.compile( r'\.(?P<type>[0-9])\.(?P<index>[0-9]+)$' )
#
# NB: We *may* have the case where processors won't line up nicely.
#     For instance, DLPAR'ing out a toasted CPU and there's no replacements available
#     for the LPAR
#
processors= {}

def process_oid( device, community, base_oid ):
    """Gather OID info and sanitize it"""

    cmd= "snmpwalk -v1 -c %s -On %s %s" % ( community, device, base_oid )
    proc= Popen( cmd, shell=True, stdout=PIPE, stderr=PIPE )

    # 
    # Check to make sure that we don't have any hangups in 
    # executing snmpwalk
    # 
    if not proc.stdout: 
        print "Couldn't open pipe to stdout for %s" % cmd 
        return 

    if not proc.stderr: 
        print "Couldn't open pipe to stderr for %s" % cmd
        return 

    for line in proc.stdout.readlines():
       ( oid, undef, undef, value )= line.split()

       #
       # Find the table entry
       #
       match= CPU_STATS.search( oid )
       if not match:
          print "Couldn't parse out index using %s" % oid
          continue

       usage_type= int( match.group('type') ) # ie user, kernel, wait or idle
       index= int( match.group('index') )
       processors[ index ]= 1

       total_usage[ usage_type ] += int(value)



if __name__ == "__main__":
    if len(sys.argv) < 3:
        print "Need device and community arguments!"
        sys.exit(1)

    (device, community )= sys.argv[1:]
    
    for base_oid in [ user_oid, kernel_oid, wait_oid, idle_oid ]:
       process_oid( device, community, base_oid )
    
    num_cpus= len( processors )
    if num_cpus == 0:
        print "Couldn't find any CPUs!\n";
        sys.exit(1)
    
    if num_cpus > 1:
       for usage_type in total_usage.keys():
          #
          # Yes, there will be inaccuracies with this calculation.
          #
          total_usage[ usage_type ]= int( total_usage[ usage_type ] / num_cpus )
    
    print "ssCpuRawUser:%s ssCpuRawSystem:%s ssCpuRawWait:%s ssCpuRawIdle:%s" % ( total_usage[user], total_usage[kernel], total_usage[wait], total_usage[idle] )
    sys.exit(0)
    
