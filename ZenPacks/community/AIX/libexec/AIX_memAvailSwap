#!/usr/bin/env python

"""Gather paging space performance statistics for AIX"""

import sys
import re
from subprocess import *

base_page_space_table_oid= "1.3.6.1.4.1.2.6.191.2.4.2.1"
totalSize_oid= 4
pctUsed_oid= 5

oid_offset= 1 + len( base_page_space_table_oid ) + 1

INDEX= re.compile( r'\.([0-9]+)$' )

def process_oid( device, community, base_oid ):
    """Gather OID info and sanitize it"""

    cmd= "snmpwalk -v1 -c %s -On %s %s" % ( community, device, base_oid )
    proc= Popen( cmd, shell=True, stdout=PIPE, stderr=PIPE )

    # 
    # Check to make sure that we don't have any hangups in 
    # executing snmpwalk
    # 
    if not proc.stdout: 
        print "Couldn't open pipe to stdout for %s" % cmd 
        return 

    if not proc.stderr: 
        print "Couldn't open pipe to stderr for %s" % cmd
        return 

    page_space_areas= {}
    memAvailSwap= 0
    for line in proc.stdout.readlines():
       ( oid, undef, undef, value )= line.split()
       #
       # Throw out anything that we don't need
       #
       isSize= False
       isPct= False
       oid_type= int( oid[oid_offset] )
       if oid_type == totalSize_oid:
          isSize= True
       elif oid_type == pctUsed_oid:
          isPct= True
       else:
          continue

       #
       # Find the table entry
       #

       match= INDEX.search( oid )
       if not match:
          print "Couldn't parse out index using %s" % oid
          continue

       index= int( match.group(1) )
       value= int( value )

       if isSize:
          page_space_areas[ index ]= value
       else:
          memAvailSwap += int( page_space_areas[ index ] * (100 - value) / 100 )

    return memAvailSwap


if __name__ == "__main__":
    if len(sys.argv) < 3:
        print "Need device and community arguments!"
        sys.exit(1)

    (device, community )= sys.argv[1:]
    
    memAvailSwap= process_oid( device, community, base_page_space_table_oid )
    print "memAvailSwap:%s" % memAvailSwap
    sys.exit(0)

